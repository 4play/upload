#!/bin/bash

##############################################################
##                                                          ##
##  ScarS' torrent upload script v0.9.1                     ##
##                                                          ##
##  created by: ScarS                                       ##
##  created on: Sat Oct 31 2009                             ##
##                                                          ##
##  last modified by: ScarS                                 ##
##  last modified on: Mon Dec 20 2010                       ##
##                                                          ##
##                                                          ##
##  script placement:                                       ##
##  /usr/local/bin/ or ~/bin/                               ##
##                                                          ##
##  command:                                                ##
##  upload [options] /path/to/dir/                          ##
##                                                          ##
##  options:                                                ##
##  -c <category>  : category to upload in to               ##
##  -d <path>      : path to downloads directory            ##
##  -h             : show short information                 ##
##  -i             : show extended information              ##
##  -l             : list of categories                     ##
##  -o <file>      : log output to file                     ##
##  -p <password>  : password                               ##
##  -r <file>      : load resource file                     ##
##  -t <path>      : path to temp dir to create torrent     ##
##  -u <username>  : username                               ##
##  -w <path>      : path to torrentclient watch directory  ##
##  -x <test>      : execute test [ cat, mkt, rfr ]         ##
##  -y <number>    : piece size to use [ in 2^n bytes ]     ##
##  -z <number>    : piece size NOT to use [ in kB ]        ##
##                                                          ##
##  requires:                                               ##
##  - bash v3.2+ [ run `bash --version' to check ]          ##
##  - curl [ run `aptitude install curl' to install ]       ##
##  - mktorrent v0.6+ [ http://mktorrent.sourceforge.net/ ] ##
##  - ~/.upload.rc [ http://tinyurl.com/uploadrc ]          ##
##                                                          ##
##  recommends:                                             ##
##  - rtorrent                                              ##
##  - rtorrent_fast_resume.pl                               ##
##                                                          ##
##############################################################

# version number
VERSION=0.9.1

###############################
##        SCRIPT START       ##
###############################

# create function to display dots
function progress {
	while [ true ]; do
		echo -n " ."
		sleep 1
	done
}

# echo start of script
echo "torrent upload script v$VERSION by ScarS"

# enable case-insensitive matching
shopt -s nocaseglob

# set default resource file
RESOURCE=".upload.rc"

# check for resource file first because some settings are used to check options
while getopts ":r:" opt; do
	case "$opt" in
	# option r: load resource file
	r )
		RESOURCE=$OPTARG;;
	esac
done

# if resource was not found in the current dir look in the uploader dir or home dir
if [ ! -f "$RESOURCE" ]; then
	if [ -f "$HOME/upload/$RESOURCE" ]; then
		RESOURCE="$HOME/upload/$RESOURCE"
	elif [ -f "$HOME/$RESOURCE" ]; then
		RESOURCE="$HOME/$RESOURCE"
	else
		echo -e "\nerror: \`$RESOURCE' does not exist. make sure you have a resource file."
		exit 1
	fi
fi

# check if resource file is readable
if [ ! -r "$RESOURCE" ]; then
	echo -e "\nerror: \`$RESOURCE' is not readable. make sure your resource file is readable."
	exit 1
fi

# include settings
source "$RESOURCE"

# reset options to walk them again
OPTIND=1

while getopts ":c:d:hilo:p:r:t:u:w:x:y:z:" opt; do
	case "$opt" in
	# option c: set a category
	c )
		# get the entered category
		CAT=$OPTARG
		CMATCH=0

		# walk array of categories and search for a match
		for (( i = 0; i < ${#ALLCATS[@]}; i++ )); do
			# if a matching category was found set the category and path and stop looping
			if [[ $CAT =~ ${ALLCATS[i]} ]]; then
                                if [ $KEYVAL -eq 1 ]; then
					CAT=${ALLCATS[i+1]}
                                else
					CAT=${ALLCATS[i]}
                                fi
				CMATCH=1
				break
			fi
		done

		# if no matching category was found return an error
		if [ $CMATCH -eq 0 ]; then
			echo -e "\nerror: entered category after option -c was not found in list of categories. run \`upload -l' for a list of categories."
			exit 1
		fi;;
	# option d: set path to download dir
	d )
		# check if input is a directory
		if [ ! -d $OPTARG ]; then
			echo -e "\nerror: entered path after option -d is not a directory. make sure the entered path points to a directory."
			exit 1
		elif [ ! -r $OPTARG ]; then
			echo -e "\nerror: directory at entered path after option -d is not readable. make sure the entered path points to a readable directory.";
			exit 1
		else
			DOWNLOADS=$OPTARG
		fi;;
	# option h: show command information
	h )
		cat <<EOF

command:
upload [options] /path/to/dir/

options:
-c <category>  : category to upload in to
-d <path>      : path to downloads directory
-h             : show short information
-i             : show extended information
-l             : list of categories
-o <file>      : log output to file
-p <password>  : password
-r <file>      : load resource file
-t <path>      : path to temp dir to create torrent
-u <username>  : username
-w <path>      : path to torrentclient watch directory
-x <test>      : execute test [ cat, mkt, rfr ]
-y <number>    : piece size to use [ in 2^n bytes ]
-z <number>    : piece size NOT to use [ in kB ]
EOF
		exit 0;;
	# option i: show extended information
	i )
		cat <<EOF

command:
upload [options] /path/to/dir/

options:
-c <category>  : category to upload in to
-d <path>      : path to downloads directory
-h             : show short information
-i             : show extended information
-l             : list of categories
-o <file>      : log output to file
-p <password>  : password
-r <file>      : load resource file
-t <path>      : path to temp dir to create torrent
-u <username>  : username
-w <path>      : path to torrentclient watch directory
-x <test>      : execute test [ cat, mkt, rfr ]
-y <number>    : piece size to use [ in 2^n bytes ]
-z <number>    : piece size NOT to use [ in kB ]

requires:
- bash v3.2+ [ run \`bash --version' to check ]
- curl [ run \`aptitude install curl' to install ]
- mktorrent v0.6+ [ http://mktorrent.sourceforge.net/ ]
- ~/.upload.rc [ http://tinyurl.com/uploadrc ]

recommends:
- rtorrent
- rtorrent_fast_resume.pl
EOF
		exit 0;;

	# option l: show list of possible categories
	l )
		# create string of categories array
		for (( i = 0; i < ${#ALLCATS[@]}; i++ )); do
			if [[ ${ALLCATS[$i]} =~ ^[0-9]*$ ]]; then
				continue
			elif [ $i -eq 0 ]; then
				RET="'${ALLCATS[$i]}'"
			else
				RET="$RET, '${ALLCATS[$i]}'"
			fi
		done

		echo -e "\nlist of categories:\n$RET"
		exit 0;;
	# option o: set output to entered file
	o )
		# check if input is a directory
		if [ -d $OPTARG ]; then
			echo -e "\nerror: entered path after option -o is a directory. makse sure the entered path points to a file.";
			exit 1
		# if entered path does not contain a / prepend the current dir
		elif [[ ! $OPTARG =~ \/ ]]; then
			LOGFILE=`pwd`/$OPTARG
		else
			LOGFILE=$OPTARG
		fi;;
	# option p: set password
	p ) PASSWORD=$OPTARG;;
	# option r: previously handled, do nothing
	r ) continue;;
	# option t: set path to temp dir
	t ) TMPPATH=$OPTARG;;
	# option u: set username
	u ) USERNAME=$OPTARG;;
	# option w: set path to torrent client watch dir
	w )
		# check if input is a directory
		if [ ! -d $OPTARG ]; then
			echo -e "\nerror: entered path after option -w is not a directory. make sure the entered path points to a directory."
			exit 1
		elif [ ! -w $OPTARG ]; then
			echo -e "\nerror: directory at entered path after option -w is not writable. make sure the entered path points to a writable directory.";
			exit 1
		else
			TORRENTS=$OPTARG
		fi;;
	# option x: set test string
	x ) TEST=$OPTARG;;
	# option y: use this piece size
	y )
		if [[ $OPTARG =~ ^[0-9]*$ ]] && [ $OPTARG -ge 15 ] && [ $OPTARG -le 28 ]; then
			PIECE_SIZE=$OPTARG
		else
			echo -e "\nerror: entered value after option -y was not a valid piece size value. run \`upload -h' for command explanation."
			exit 1
		fi;;
	# option z: set what piece size NOT to use
	z )
		# min piece size: 2^15
		MIN=32768
		# max piece size: 2^28
		MAX=268435456

		# check if input is a number
		if [[ $OPTARG =~ ^[0-9]*$ ]] && [ $OPTARG -ge $MIN ] && [ $OPTARG -le $MAX ]; then
			# start at min piece size
			NUM=15

			# check all piece sizes
			while [ $MAX -ge $MIN ]; do
				# if input is larger than piece size increase by 1
				if [ $OPTARG -gt $MAX ]; then
					let NUM+=1
				fi
				# divide by 2 to get previous 2^x value
				let MAX/=2
			done

			NOTPIECES=$NUM
		else
			echo -e "\nerror: entered value after option -z was not a valid piece size value. run \`upload -h' for command explanation."
			exit 1
		fi;;
	# option *: unknown option. return with an error
	* )
		echo -e "\nerror: -$OPTARG: this option was not recognised. run \`upload -h' for command explanation."
		exit 1;;
	esac
done

# check if the command mktorrent was found
if ( ! which "$MKT" &>/dev/null ); then
	echo -e "\nerror: \`$MKT' is not a command. make sure the path of MKTORRENT is right."
	exit 1
# check if the command rtorrent_fast_resume was found
elif [ -n "$RFR" ] && ( ! which "$RFR" &>/dev/null ); then
	echo -e "\nerror: \`$RFR' is not a command. make sure the path of RFR [ rtorrent_fast_resume.pl ] is right."
	exit 1
# check if the command curl was found
elif ( ! which "$CURL" &>/dev/null ); then
	echo -e "\nerror: \`curl' is not a command. make sure the path of CURL is right. if not installed: run as root [or sudo] \`aptitude install curl' and try again."
	exit 1
fi

# check if downloads dir is a dir
if [ ! -d "$DOWNLOADS" ]; then
	echo -e "\nerror: \`$DOWNLOADS' is not a directory. make sure the path of DOWNLOADS is right."
	exit 1
# check if downloads dir is readable
elif [ ! -r "$DOWNLOADS" ]; then
	echo -e "\nerror: \`$DOWNLOADS' is not readable. make sure the path of DOWNLOADS points to a readable directory."
	exit 1
# check if torrents dir is a dir
elif [ ! -d "$TORRENTS" ]; then
	echo -e "\nerror: \`$TORRENTS' is not a directory. make sure the path of TORRENTS is right."
	exit 1
# check if torrents dir is writable
elif [ ! -w "$TORRENTS" ]; then
	echo -e "\nerror: \`$TORRENTS' is not writable. make sure the path of TORRENTS points to a readable directory."
	exit 1
# check if temp dir is a dir
elif [ ! -d "$TMPPATH" ]; then
	echo -e "\nerror: \`$TMPPATH' is not a directory. make sure the path of TMPPATH is right."
	exit 1
# check if temp dir is a dir
elif [ ! -r "$TMPPATH" ]; then
	echo -e "\nerror: \`$TMPPATH' is not readable. make sure the path of TMPPATH points to a readable directory."
	exit 1
# check if logfile is a dir
elif [ -d "$LOGFILE" ]; then
	echo -e "\nerror: \`$LOGFILE' is a directory. make sure the path of LOGFILE points to a file."
	exit 1
fi

# check for ending slash in torrents dir and if not exist append it
if [[ "$DOWNLOADS" != */ ]]; then
	DOWNLOADS="$DOWNLOADS/"
fi

# check for ending slash in torrents dir and if not exists append it
if [[ "$TORRENTS" != */ ]]; then
	TORRENTS="$TORRENTS/"
fi

# check for ending slash in temp dir and if not exists append it
if [[ "$TMPPATH" != */ ]]; then
	TMPPATH="$TMPPATH/"
fi

# switch to entered variables after options
shift $((OPTIND-1))

# if no variables were passed to the script
if [ ! -n "$1" ]; then
	echo -e "\nerror: you did not enter a path. run \`upload -h' for command explanation."
	exit 1
# if a third variable was passed to the script
elif [ -n "$2" ]; then
	echo -e "\nerror: you entered too many variables. run \`upload -h' for command explanation."
	exit 1
fi

# set the entered path
RLSPATH="$1"

# if entered path does not contain a / prepend the download dir
if [[ ! "$RLSPATH" =~ \/ ]]; then
	RLSPATH="$DOWNLOADS$RLSPATH"
fi

# check if entered path is a directory
if [ ! -d "$RLSPATH" ]; then
	echo -e "\nerror: \`$RLSPATH' is not a directory."
	exit 1
fi

# move to the entered path
cd "$RLSPATH"

# get the full path
FPATH=`pwd`

# get the dir name from the path by removing the download dir prefix
NAME=${FPATH/$DOWNLOADS/}

# replace & with its hex value for searching
SEARCHNAME=${NAME//&/%26/}

# if the name is the same as the path it's not in the downloads dir so return an error
if [ "$NAME" = "$FPATH" ]; then
	echo -e "\nerror: \`$FPATH' is not in \`$DOWNLOADS'."
	exit 1
fi

# check filters
if [ ! -n "$CAT" ]; then
	MATCH=0
	# walk array of filters and search for a match
	for (( i = 0; i < ${#FILTERS[@]}; i++ )); do
		# if a match was found set the min, max and category and stop looping
		if [[ "$RLSPATH" =~ "${FILTERS[$i]}" ]] && [[ ! -n ${EXCEPTS[i]} || ! "$RLSPATH" =~ ${EXCEPTS[i]} ]]; then
			MINSIZE=${MINS[i]}
			MAXSIZE=${MAXS[i]}
			CAT=${CATS[i]}
			MATCH=1
			break
		fi
	done

	# if no match found return an error
	if [ $MATCH -eq 0 ]; then
		echo -e "\nerror: no match was found with your filters."
		exit 1
	fi
fi

# check if filters need to be tested
if [[ $TEST =~ cat ]]; then
	echo -e "\nfilter test complete\ncategory found: $CAT"
	exit 1
fi

# get the dir size
SIZE=`du -s "$FPATH" | cut -f 1`

# get the dir size in MB
MBs=$((SIZE/1024))

# look for match with size filter and if found return an error
if [ -n "$MATCH" ] && [[ $MBs -lt $MINSIZE || $MBs -gt $MAXSIZE ]]; then
	echo -e "\nerror: $MBs MB is lower than $MINSIZE MB or greater than $MAXSIZE MB."
	exit 1
fi

# if release is already being uploaded return an error, else create uploading directory
if [ $UPCHECK -eq 1 ] && [ -d "$FPATH" ] && [ -d "$FPATH/.uploading" ]; then
	echo -e "\nerror: torrent is already being uploaded (.uploading directory found in release directory).";
	exit 1
elif [ -d "$FPATH" ] && [ ! -d "$FPATH/.uploading" ]; then
	mkdir "$FPATH/.uploading"
fi

# create random value to append to temporarily directories
TMP=$RANDOM

# move to tmp dir
cd "$TMPPATH"

# set main log
MAINLOG="$LOGFILE"

# set temp log
LOGFILE=log$TMP.tmp

# log start script and info
echo >> $LOGFILE
echo "########################################################" >> $LOGFILE
echo "### auto upload started at: `date`" >> $LOGFILE
echo "### name: $NAME" >> $LOGFILE
echo "### path: $FPATH" >> $LOGFILE
echo "### size: $MBs MB" >> $LOGFILE

# check if uploading needs to be done so we need to log in and look for a dupe
if [[ ! $TEST =~ mkt ]] && [[ ! $TEST =~ rfr ]]; then
	echo -en "\nlogging in . . ."

	# start dot function
	progress &

	# get process pid
	PROCESS=$!

	# disown process to supress output
	disown %%

	# log in to the site
	wget -q --no-check-certificate -O login$TMP.tmp --save-cookies cookies$TMP.tmp --keep-session-cookies --post-data "$LOGINUSR=$USERNAME&$LOGINPWD=$PASSWORD" "$LOGINURL"

	# when done kill dot function
	kill $PROCESS

	# check if you are logged in
	LOGINCHECK=`grep "$LOGINTXT" login$TMP.tmp`

	# if you are not logged in stop the auto upload
	if [ -n "$LOGINCHECK" ]; then
		echo -e "\b failed\n\nerror: it appears you could not be logged in. check username, password and website url."
		echo "### error: it appears you could not be logged in" >> $LOGFILE
		echo "### auto upload stopped at: `date`" >> $LOGFILE
		cat $LOGFILE >> $MAINLOG
		rm -f login$TMP.tmp cookies$TMP.tmp $LOGFILE
		rm -rf "$FPATH/.uploading"
		echo "login" > "$FPATH/.uploaderror"
		exit 1
	fi

	echo -en " logged in\n\nchecking for dupe . . ."

	# start dot function
	progress &

	# get process pid
	PROCESS=$!

	# disown process to supress output
	disown %%

	# search the site for the torrent
	wget -q --no-check-certificate -O dupecheck$TMP.tmp --load-cookies cookies$TMP.tmp "$SEARCHURL$SEARCHNAME"

	# when done kill the dot function
	kill $PROCESS

	# check if a result was found
	DUPECHECK=`grep "$SEARCHTXT" dupecheck$TMP.tmp`

	# if a result was found stop the auto upload
	if [ ! -n "$DUPECHECK" ]; then
		echo -e "\bdupe found\n\nerror: torrent has already been uploaded."
		echo "### error: torrent has already been uploaded" >> $LOGFILE

		# check if the duped release needs to be downloaded
		if [ $DUPEDL -eq 1 ]; then
			# grab download link
			DLPAGE=`grep "$DUPETXT" /tmp/dupecheck$TMP.tmp | $DUPECMD`
			DLPAGE=${DLPAGE//&amp;/&}

			# download torrent
			echo -e "\ndownloading: $DUPEURL$DLPAGE"
			wget -q --no-check-certificate -O "$NAME.torrent" --load-cookies cookies$TMP.tmp "$DUPEURL$DLPAGE"
			echo "### downloaded: $DUPEURL$DLPAGE" >> $LOGFILE

			# check if rtorrent_fast_resume.pl needs to be done
			if [ -n "$RFR" ] && [[ ! $TEST =~ mkt ]]; then
			    # run rtorrent_fast_resume on the torrent
			    $RFR $DOWNLOADS < "$NAME.torrent" > "$TORRENTS$PREPEND$NAME.torrent"
			    rm -f "$NAME.torrent"
			# check if the mktorrent created torrent needs to be moved
			elif [[ ! $TEST =~ mkt ]]; then
			    mv "$NAME.torrent" "$TORRENTS$PREPEND$NAME.torrent"
			else
			    echo -e "\nmktorrent test completed\ntorrent saved: $TMPPATH$NAME.torrent"
			    echo "### mktorrent test completed - torrent saved: $TMPPATH$NAME.torrent" >> $LOGFILE
			fi
		fi

		echo "### auto upload stopped at: `date`" >> $LOGFILE
		cat $LOGFILE >> $MAINLOG
		rm -f login$TMP.tmp cookies$TMP.tmp dupecheck$TMP.tmp $LOGFILE
		rm -rf "$FPATH/.uploading"
		echo "dupe" > "$FPATH/.uploaderror"
		exit 1
	fi

	echo -e "\bno dupe found\n"
fi

# calculate piece size depending on dir size

if [ $MBs -gt 66560 ]; then
	PIECES=25
elif [ $MBs -gt 32768 ]; then
	PIECES=24
elif [ $MBs -gt 15360 ]; then
        PIECES=23
elif [ $MBs -gt 6144 ]; then
        PIECES=22
elif [ $MBs -gt 2560 ]; then
        PIECES=21
elif [ $MBs -gt 1024 ]; then
        PIECES=20
elif [ $MBs -gt 512 ]; then
        PIECES=19
elif [ $MBs -gt 384 ]; then
        PIECES=18
elif [ $MBs -gt 256 ]; then
        PIECES=17
elif [ $MBs -gt 128 ]; then
        PIECES=16
else
        PIECES=15
fi

# set specified piece size
if [ -n "$PIECE_SIZE" ]; then
        PIECES=$PIECE_SIZE
fi

# if piece size matched entered piece size not to chose size and is highest possible piece size decrement by 1
if [[ $NOTPIECES -eq $PIECES ]] && [ $PIECES -eq 23 ]; then
	let PIECES-=1
	echo "### original piece size: $NOTPIECES ("$((2**NOTPIECES))" bytes)" >> $LOGFILE
	echo "### piece size: $PIECES ("$((2**PIECES))" bytes)" >> $LOGFILE
# if piece size matched entered piece size not to chose increment by 1
elif [[ $NOTPIECES -eq $PIECES ]]; then
	let PIECES+=1
	echo "### original piece size: $NOTPIECES ("$((2**NOTPIECES))" bytes)" >> $LOGFILE
	echo "### piece size: $PIECES ("$((2**PIECES))" bytes)" >> $LOGFILE
# log piece size
else
	echo "### piece size: $PIECES ("$((2**PIECES))" bytes)" >> $LOGFILE
fi

# log start mktorrent
echo "### mktorrent started: `date`" >> $LOGFILE

# create the torrent
"$MKT" -l $PIECES -c "created with ScarS' upload script" -o "$NAME.torrent" -pa "$ANNOUNCEURL" "$FPATH"

# log complete mktorrent
echo "### mktorrent completed: `date`" >> $LOGFILE

# check if uploading needs to be done
if [[ ! $TEST =~ mkt ]] && [[ ! $TEST =~ rfr ]]; then
	echo -en "\nchecking for dupe . . ."

	# start dot function
	progress &

	# get process pid
	PROCESS=$!

	# disown process to supress output
	disown %%

	# search the site for the torrent
	wget -q --no-check-certificate -O dupecheck$TMP.tmp --load-cookies cookies$TMP.tmp "$SEARCHURL$SEARCHNAME"

	# when done kill the dot function
	kill $PROCESS

	# check if you are logged in
	LOGINCHECK=`grep "$LOGINTXT" dupecheck$TMP.tmp`

	# if you are not logged in try to log in again
	if [ -n "$LOGINCHECK" ]; then
		echo -en " failed to log in\n\nlogging in . . ."

		# start dot function
		progress &

		# get process pid
		PROCESS=$!

		# disown process to supress output
		disown %%

		# log in again
		wget -q --no-check-certificate -O login$TMP.tmp --save-cookies cookies$TMP.tmp --keep-session-cookies --post-data "$LOGINUSR=$USERNAME&$LOGINPWD=$PASSWORD" "$LOGINURL"

		# when done kill the function
		kill $PROCESS

		# check if you are logged in
		LOGINCHECK=`grep "$LOGINTXT" login$TMP.tmp`

		# if you are not logged in stop the auto upload
		if [ -n "$LOGINCHECK" ]; then
			echo -e "\bfailed\n\nerror: it appears you could not be logged in - torrent saved: \`$TMPPATH$NAME.torrent'."
			echo "### error: it appears you could not be logged in - torrent saved: $TMPPATH$NAME.torrent" >> $LOGFILE
			echo "### auto upload stopped at: `date`" >> $LOGFILE
			cat $LOGFILE >> $MAINLOG
			rm -f login$TMP.tmp cookies$TMP.tmp $LOGFILE
			rm -rf "$FPATH/.uploading"
			echo "login" > "$FPATH/.uploaderror"
			exit 1
		fi
		echo -en " logged in\n\nchecking for dupe . . ."

		# start dot function
		progress &

		# get process pid
		PROCESS=$!

		# disown process to supress output
		disown %%

		# search the site for the torrent
		wget -q --no-check-certificate -O dupecheck$TMP.tmp --load-cookies cookies$TMP.tmp "$SEARCHURL$SEARCHNAME"

		# when done kill the dot function
		kill $PROCESS
	fi

	# check if a result was found
	DUPECHECK=`grep "$SEARCHTXT" dupecheck$TMP.tmp`

	# if a result was found stop the auto upload
	if [ ! -n "$DUPECHECK" ]; then
		echo -e "\bdupe found\n\nerror: torrent has already been uploaded - torrent removed."
		echo "### error: torrent has already been uploaded - torrent removed" >> $LOGFILE

		# check if the duped release needs to be downloaded
		if [ $DUPEDL -eq 1 ]; then
			# grab download link
			DLPAGE=`grep "$DUPETXT" /tmp/dupecheck$TMP.tmp | $DUPECMD`
			DLPAGE=${DLPAGE//&amp;/&}

			# download torrent
			echo -e "\ndownloading: $DUPEURL$DLPAGE"
			wget -q --no-check-certificate -O "$NAME.torrent" --load-cookies cookies$TMP.tmp "$DUPEURL$DLPAGE"
			echo "### downloaded: $DUPEURL$DLPAGE" >> $LOGFILE

			# check if rtorrent_fast_resume.pl needs to be done
			if [ -n "$RFR" ] && [[ ! $TEST =~ mkt ]]; then
			    # run rtorrent_fast_resume on the torrent
			    $RFR $DOWNLOADS < "$NAME.torrent" > "$TORRENTS$PREPEND$NAME.torrent"
			    rm -f "$NAME.torrent"
			# check if the mktorrent created torrent needs to be moved
			elif [[ ! $TEST =~ mkt ]]; then
			    mv "$NAME.torrent" "$TORRENTS$PREPEND$NAME.torrent"
			else
			    echo -e "\nmktorrent test completed\ntorrent saved: $TMPPATH$NAME.torrent"
			    echo "### mktorrent test completed - torrent saved: $TMPPATH$NAME.torrent" >> $LOGFILE
			fi
		fi

		echo "### auto upload stopped at: `date`" >> $LOGFILE
		cat $LOGFILE >> $MAINLOG
		rm -f login$TMP.tmp cookies$TMP.tmp dupecheck$TMP.tmp "$NAME.torrent" $LOGFILE
		rm -rf "$FPATH/.uploading"
		echo "dupe" > "$FPATH/.uploaderror"
		exit 1
	fi

	echo -e "\bno dupe found"

	# look for an NFO in the top dir
	NFO=`find "$FPATH" -maxdepth 1 -iname *.nfo -print -quit`
	DELNFO=0

	# if no NFO has been found look for an NFO in subdirs
	if [ ! -n "$NFO" ]; then
		NFO=`find "$FPATH" -iname *.nfo -print -quit`
	fi

	# if no NFO has been found create one to enter description
	if [ ! -n "$NFO" ]; then
		echo "### nfo: not found, creating custom one" >> $LOGFILE
		echo "name: $NAME" > nfo$TMP.tmp
		echo "category: $CAT" >> nfo$TMP.tmp
		echo "size: $MBs MB ($SIZE kB)" >> nfo$TMP.tmp
		echo "No NFO was supplied for this release" >> nfo$TMP.tmp
		NFO=nfo$TMP.tmp
		DELNFO=1
	else
		echo "### nfo: $NFO" >> $LOGFILE
	fi

	echo -en "\nuploading torrent . . ."

	# start dot function
	progress &

	# get process pid
	PROCESS=$!

	# disown process to supress output
	disown %%

	# prepare the upload command
	UPLOADCMD="'$CURL' -s -k -o upload$TMP.tmp -b cookies$TMP.tmp -H 'Expect:' -F '$UPLOADCAT=$CAT' -F '$UPLOADTOR=@$NAME.torrent' -F '$UPLOADNFO=@$NFO' -F '$UPLOADDESC=<$NFO' $UPLOADXTRA '$UPLOADURL'"

	# execute the upload command (need to use eval for $UPLOADXTRA)
	eval $UPLOADCMD

	# when done kill the dot function
	kill $PROCESS

	echo -e "\bupload complete\n"

	if [ -e upload$TMP.tmp ] && [ `cat upload$TMP.tmp | wc -c` -ne 1 ]; then
		echo -e "NOTE: the site returned something. make sure the upload is working properly. you might need to re-download the torrent.\ncheck the content of \`$TMPPATHupload$TMP.tmp' for the exact output.\n"
	elif [ -e upload$TMP.tmp ]; then
		rm -f upload$TMP.tmp
	fi
fi

# remove the temporarily files
rm -f login$TMP.tmp cookies$TMP.tmp dupecheck$TMP.tmp

# check if rtorrent_fast_resume.pl needs to be done
if [ -n "$RFR" ] && [[ ! $TEST =~ mkt ]]; then
	# run rtorrent_fast_resume on the torrent
	"$RFR" "$DOWNLOADS" < "$NAME.torrent" > "$TORRENTS$PREPEND$NAME.torrent"

	# remove origional torrent
	rm -f "$NAME.torrent"
# check if the mktorrent created torrent needs to be moved
elif [[ ! $TEST =~ mkt ]]; then
	mv "$NAME.torrent" "$TORRENTS$PREPEND$NAME.torrent"
fi

if [[ $TEST =~ mkt ]]; then
	echo -e "\nmktorrent test completed\ntorrent saved: $TMPPATH$NAME.torrent"
	echo "### mktorrent test completed - torrent saved: $TMPPATH$NAME.torrent" >> $LOGFILE
	echo "### auto upload stopped at: `date`" >> $LOGFILE
	cat $LOGFILE >> $MAINLOG
	rm -f $LOGFILE
	rm -rf "$FPATH/.uploading"
	exit 1
elif [[ $TEST =~ rfr ]]; then
	echo -e "\nrtorrent_fast_resume.pl test completed\ntorrent should be in your torrent client watch directory."
	echo "### rtorrent_fast_resume.pl test completed - torrent should be in your torrent client watch directory" >> $LOGFILE
	echo "### auto upload stopped at: `date`" >> $LOGFILE
	cat $LOGFILE >> $MAINLOG
	rm -f $LOGFILE
	rm -rf "$FPATH/.uploading"
	exit 1
fi

# if an NFO was created remove it again
if [ $DELNFO -eq 1 ]; then
	rm -f nfo$TMP.tmp
fi

# echo script completion
echo -e "\ntorrent moved to torrent client watch dir."
echo "### auto upload completed at: `date`" >> $LOGFILE

# append temporarily log to main log and remove temporarily log
cat $LOGFILE >> $MAINLOG
rm -f $LOGFILE

# remove the .uploading dir
rm -rf "$FPATH/.uploading"

# check if uploaded dir exists and if not create it
if [ ! -d "$FPATH/.uploaded" ]; then
	mkdir "$FPATH/.uploaded"
fi

###############################
##        SCRIPT END         ##
###############################
